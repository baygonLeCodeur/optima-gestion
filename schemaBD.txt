-- ==========================================
-- SCHEMA POSTGRESQL OPTIMAL - OPTIMA GESTION
-- Version corrigée sans earthdistance
-- ==========================================

-- Extension pour UUID
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "pgcrypto"; -- Pour le chiffrement

-- ==========================================
-- TABLES PRINCIPALES
-- ==========================================

-- Table des utilisateurs (compatible NextAuth.js)
CREATE TABLE public.users (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    email TEXT UNIQUE NOT NULL,
    email_verified TIMESTAMP WITH TIME ZONE,
    full_name TEXT,
    phone_number TEXT,
    image TEXT, -- Avatar utilisateur
    role TEXT NOT NULL DEFAULT 'client' CHECK (role IN ('client', 'agent', 'admin')),
    provider TEXT, -- google, credentials, etc.
    provider_account_id TEXT,
    is_active BOOLEAN DEFAULT TRUE,
    last_login TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Tables NextAuth.js
CREATE TABLE public.accounts (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
    type TEXT NOT NULL,
    provider TEXT NOT NULL,
    provider_account_id TEXT NOT NULL,
    refresh_token TEXT,
    access_token TEXT,
    expires_at INTEGER,
    token_type TEXT,
    scope TEXT,
    id_token TEXT,
    session_state TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(provider, provider_account_id)
);

CREATE TABLE public.sessions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    session_token TEXT UNIQUE NOT NULL,
    user_id UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
    expires TIMESTAMP WITH TIME ZONE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE TABLE public.verification_tokens (
    identifier TEXT NOT NULL,
    token TEXT UNIQUE NOT NULL,
    expires TIMESTAMP WITH TIME ZONE NOT NULL,
    PRIMARY KEY (identifier, token)
);

-- Table des types de biens
CREATE TABLE public.property_types (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name TEXT UNIQUE NOT NULL,
    description TEXT,
    icon_name TEXT, -- Nom de l'icône pour l'UI
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Table des biens immobiliers (enrichie)
CREATE TABLE public.properties (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    title TEXT NOT NULL,
    description TEXT,
    address TEXT NOT NULL,
    city TEXT NOT NULL,
    zip_code TEXT,
    country TEXT NOT NULL DEFAULT 'Côte d''Ivoire',
    latitude NUMERIC(10, 8),
    longitude NUMERIC(11, 8),
    price NUMERIC(15, 2) NOT NULL,
    security_deposit SMALLINT, -- la caution stockée en nombre de mois.
    advance_rent SMALLINT, -- l’avance stockée en nombre de mois.
    currency TEXT NOT NULL DEFAULT 'XOF',
    area_sqm NUMERIC(10, 2),
    number_of_rooms INTEGER,
    number_of_bathrooms INTEGER,
    number_of_parkings INTEGER DEFAULT 0,
    has_garden BOOLEAN DEFAULT FALSE,
    has_pool BOOLEAN DEFAULT FALSE,
    has_elevator BOOLEAN DEFAULT FALSE,
    floor_number INTEGER,
    total_floors INTEGER,
    year_built INTEGER,
    energy_rating TEXT CHECK (energy_rating IN ('A', 'B', 'C', 'D', 'E', 'F', 'G')),
    property_type_id UUID NOT NULL REFERENCES public.property_types(id) ON DELETE RESTRICT,
    status TEXT NOT NULL DEFAULT 'available' CHECK (status IN ('available', 'rented', 'sold', 'under_contract', 'archived')),
    is_for_sale BOOLEAN NOT NULL DEFAULT FALSE,
    is_for_rent BOOLEAN NOT NULL DEFAULT FALSE,
    is_featured BOOLEAN DEFAULT FALSE, -- Propriété mise en avant
    view_count INTEGER DEFAULT 0, -- Nombre de vues
    image_paths TEXT[] DEFAULT ARRAY[]::TEXT[],
    video_paths TEXT[] DEFAULT ARRAY[]::TEXT[],
    document_paths TEXT[] DEFAULT ARRAY[]::TEXT[], -- Plans, diagnostics, etc.
    amenities TEXT[] DEFAULT ARRAY[]::TEXT[], -- Équipements
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    agent_id UUID REFERENCES public.users(id) ON DELETE SET NULL
);

-- Table des visites virtuelles (Pannellum)
CREATE TABLE public.virtual_tours (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    property_id UUID NOT NULL REFERENCES public.properties(id) ON DELETE CASCADE,
    title TEXT NOT NULL,
    default_scene TEXT, -- Scène par défaut
    scenes JSONB NOT NULL, -- Configuration des scènes Pannellum
    hotspots JSONB, -- Points d'intérêt
    auto_rotate BOOLEAN DEFAULT FALSE,
    auto_rotate_speed NUMERIC(3,1) DEFAULT 2.0,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Table des créneaux disponibles pour les agents
CREATE TABLE public.agent_availabilities (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    agent_id UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
    day_of_week INTEGER NOT NULL CHECK (day_of_week BETWEEN 0 AND 6), -- 0=Dimanche
    start_time TIME NOT NULL,
    end_time TIME NOT NULL,
    is_available BOOLEAN DEFAULT TRUE,
    max_visits_per_slot INTEGER DEFAULT 1,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Table des visites (enrichie)
CREATE TABLE public.visits (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    property_id UUID NOT NULL REFERENCES public.properties(id) ON DELETE CASCADE,
    client_id UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
    agent_id UUID REFERENCES public.users(id) ON DELETE SET NULL,
    scheduled_at TIMESTAMP WITH TIME ZONE NOT NULL,
    duration_minutes INTEGER DEFAULT 60,
    visitor_count INTEGER DEFAULT 1,
    visit_type TEXT DEFAULT 'physical' CHECK (visit_type IN ('physical', 'virtual')),
    status TEXT NOT NULL DEFAULT 'pending' CHECK (status IN ('pending', 'confirmed', 'canceled', 'completed', 'no_show')),
    client_notes TEXT, -- Notes du client
    agent_notes TEXT, -- Notes de l'agent
    reminder_sent BOOLEAN DEFAULT FALSE,
    feedback_rating INTEGER CHECK (feedback_rating BETWEEN 1 AND 5),
    feedback_comment TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Table des leads (enrichie)
CREATE TABLE public.leads (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    email TEXT UNIQUE NOT NULL,
    full_name TEXT,
    phone_number TEXT,
    budget_min NUMERIC(15, 2),
    budget_max NUMERIC(15, 2),
    preferred_areas TEXT[], -- Zones géographiques préférées
    property_types TEXT[], -- Types de biens recherchés
    interest TEXT,
    source TEXT,
    utm_source TEXT, -- Tracking marketing
    utm_medium TEXT,
    utm_campaign TEXT,
    status TEXT NOT NULL DEFAULT 'new' CHECK (status IN ('new', 'contacted', 'qualified', 'disqualified', 'converted')),
    priority TEXT DEFAULT 'medium' CHECK (priority IN ('low', 'medium', 'high')),
    assigned_agent_id UUID REFERENCES public.users(id) ON DELETE SET NULL,
    last_contact_at TIMESTAMP WITH TIME ZONE,
    next_follow_up TIMESTAMP WITH TIME ZONE,
    conversion_date TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Table des communications (enrichie)
CREATE TABLE public.communications (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    sender_id UUID REFERENCES public.users(id) ON DELETE SET NULL,
    receiver_id UUID REFERENCES public.users(id) ON DELETE SET NULL,
    lead_id UUID REFERENCES public.leads(id) ON DELETE CASCADE,
    property_id UUID REFERENCES public.properties(id) ON DELETE CASCADE,
    type TEXT NOT NULL CHECK (type IN ('email', 'sms', 'call', 'whatsapp', 'internal_message')),
    subject TEXT,
    body TEXT NOT NULL,
    attachments TEXT[], -- Pièces jointes
    whatsapp_message_id TEXT,
    delivery_status TEXT DEFAULT 'pending' CHECK (delivery_status IN ('pending', 'sent', 'delivered', 'read', 'failed')),
    read_at TIMESTAMP WITH TIME ZONE,
    sent_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Table des documents (enrichie pour Adobe Sign)
CREATE TABLE public.documents (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    document_type TEXT NOT NULL CHECK (document_type IN ('lease', 'sale_agreement', 'mandate', 'estimate', 'invoice', 'other')),
    template_id UUID, -- Référence vers un modèle
    title TEXT NOT NULL,
    file_path TEXT NOT NULL,
    file_name TEXT,
    file_size INTEGER,
    mime_type TEXT,
    property_id UUID REFERENCES public.properties(id) ON DELETE CASCADE,
    client_id UUID REFERENCES public.users(id) ON DELETE CASCADE,
    agent_id UUID REFERENCES public.users(id) ON DELETE SET NULL,
    
    -- Adobe Sign Integration
    adobe_agreement_id TEXT,
    signature_status TEXT DEFAULT 'draft' CHECK (signature_status IN ('draft', 'sent', 'signed', 'cancelled', 'expired')),
    signature_url TEXT,
    signed_document_url TEXT,
    
    -- Signatures traditionnelles
    is_signed BOOLEAN DEFAULT FALSE,
    signed_by_client_at TIMESTAMP WITH TIME ZONE,
    signed_by_agent_at TIMESTAMP WITH TIME ZONE,
    
    -- Metadata
    variables JSONB, -- Variables pour remplir les modèles
    version INTEGER DEFAULT 1,
    parent_document_id UUID REFERENCES public.documents(id),
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Table des estimations (enrichie)
CREATE TABLE public.property_estimations (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    property_id UUID REFERENCES public.properties(id) ON DELETE CASCADE,
    client_id UUID REFERENCES public.users(id) ON DELETE CASCADE,
    agent_id UUID REFERENCES public.users(id) ON DELETE SET NULL,
    estimation_type TEXT DEFAULT 'automatic' CHECK (estimation_type IN ('automatic', 'manual', 'expert')),
    estimated_value NUMERIC(15, 2) NOT NULL,
    confidence_score NUMERIC(3, 2), -- Score de confiance 0-1
    currency TEXT NOT NULL DEFAULT 'XOF',
    market_trends JSONB, -- Tendances du marché
    comparable_properties JSONB, -- Propriétés comparables
    parameters_used JSONB,
    notes TEXT,
    is_shared_with_client BOOLEAN DEFAULT FALSE,
    valid_until TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Table des paiements (enrichie pour CinetPay)
CREATE TABLE public.payments (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    client_id UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
    property_id UUID REFERENCES public.properties(id) ON DELETE SET NULL,
    document_id UUID REFERENCES public.documents(id) ON DELETE SET NULL,
    
    -- Montants
    amount NUMERIC(15, 2) NOT NULL,
    currency TEXT NOT NULL DEFAULT 'XOF',
    fees NUMERIC(15, 2) DEFAULT 0,
    net_amount NUMERIC(15, 2),
    
    -- Méthodes de paiement CinetPay
    payment_method TEXT NOT NULL, -- 'WAVE', 'ORANGE_MONEY', 'MTN_MONEY', 'MOOV_MONEY', 'CARD'
    cinetpay_transaction_id TEXT UNIQUE,
    cinetpay_payment_token TEXT,
    
    -- Statuts
    status TEXT NOT NULL DEFAULT 'pending' CHECK (status IN ('pending', 'processing', 'completed', 'failed', 'refunded', 'cancelled')),
    
    -- Dates
    payment_date TIMESTAMP WITH TIME ZONE,
    refund_date TIMESTAMP WITH TIME ZONE,
    
    -- Metadata
    description TEXT,
    customer_phone TEXT, -- Numéro pour mobile money
    return_url TEXT,
    cancel_url TEXT,
    webhook_data JSONB,
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);


-- 1. Création de la table "testimonials"
CREATE TABLE public.testimonials (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
  name TEXT NOT NULL,
  title TEXT,
  description TEXT NOT NULL,
  avatar_text TEXT,
  is_approved BOOLEAN DEFAULT FALSE NOT NULL
);

-- ==========================================
-- TABLES SUPPLEMENTAIRES
-- ==========================================

-- Table des favoris
CREATE TABLE public.user_favorites (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
    property_id UUID NOT NULL REFERENCES public.properties(id) ON DELETE CASCADE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(user_id, property_id)
);

-- Table des recherches sauvegardées
CREATE TABLE public.saved_searches (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
    name TEXT NOT NULL,
    search_criteria JSONB NOT NULL,
    email_alerts BOOLEAN DEFAULT FALSE,
    alert_frequency TEXT DEFAULT 'daily' CHECK (alert_frequency IN ('immediate', 'daily', 'weekly')),
    is_active BOOLEAN DEFAULT TRUE,
    last_run TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Table des notifications
CREATE TABLE public.notifications (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
    type TEXT NOT NULL, -- 'visit_reminder', 'new_message', 'payment_received', etc.
    title TEXT NOT NULL,
    message TEXT NOT NULL,
    data JSONB, -- Données supplémentaires
    is_read BOOLEAN DEFAULT FALSE,
    read_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Table d'audit
CREATE TABLE public.audit_logs (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    table_name TEXT NOT NULL,
    record_id UUID NOT NULL,
    action TEXT NOT NULL, -- 'INSERT', 'UPDATE', 'DELETE'
    old_values JSONB,
    new_values JSONB,
    user_id UUID REFERENCES public.users(id),
    ip_address INET,
    user_agent TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- ==========================================
-- INDEX DE PERFORMANCE
-- ==========================================

-- Index utilisateurs
CREATE INDEX idx_users_email ON public.users (email);
CREATE INDEX idx_users_role ON public.users (role);
CREATE INDEX idx_users_is_active ON public.users (is_active);

-- Index NextAuth.js
CREATE INDEX idx_accounts_user_id ON public.accounts (user_id);
CREATE INDEX idx_sessions_user_id ON public.sessions (user_id);
CREATE INDEX idx_sessions_session_token ON public.sessions (session_token);

-- Index propriétés
CREATE INDEX idx_properties_city ON public.properties (city);
CREATE INDEX idx_properties_status ON public.properties (status);
CREATE INDEX idx_properties_price ON public.properties (price);
CREATE INDEX idx_properties_is_for_sale ON public.properties (is_for_sale);
CREATE INDEX idx_properties_is_for_rent ON public.properties (is_for_rent);
CREATE INDEX idx_properties_agent_id ON public.properties (agent_id);
CREATE INDEX idx_properties_property_type_id ON public.properties (property_type_id);
CREATE INDEX idx_properties_is_featured ON public.properties (is_featured);

-- Index géospatial corrigé (sans earthdistance)
CREATE INDEX idx_properties_lat ON public.properties (latitude) WHERE latitude IS NOT NULL;
CREATE INDEX idx_properties_lng ON public.properties (longitude) WHERE longitude IS NOT NULL;

-- Index autres tables
CREATE INDEX idx_visits_property_id ON public.visits (property_id);
CREATE INDEX idx_visits_client_id ON public.visits (client_id);
CREATE INDEX idx_visits_scheduled_at ON public.visits (scheduled_at);
CREATE INDEX idx_leads_status ON public.leads (status);
CREATE INDEX idx_leads_assigned_agent_id ON public.leads (assigned_agent_id);
CREATE INDEX idx_communications_sender_id ON public.communications (sender_id);
CREATE INDEX idx_communications_receiver_id ON public.communications (receiver_id);
CREATE INDEX idx_payments_client_id ON public.payments (client_id);
CREATE INDEX idx_payments_status ON public.payments (status);
CREATE INDEX idx_notifications_user_id_unread ON public.notifications (user_id, is_read);

-- ==========================================
-- FONCTIONS UTILITAIRES
-- ==========================================

-- Fonction de mise à jour automatique
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;

$$ LANGUAGE plpgsql;

-- Fonction pour récupérer le rôle utilisateur
CREATE OR REPLACE FUNCTION get_my_role()
RETURNS TEXT AS $$
DECLARE
  user_role TEXT;
BEGIN
  SELECT role INTO user_role FROM public.users WHERE id = auth.uid();
  RETURN user_role;
END;

$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Fonction pour compter les vues
CREATE OR REPLACE FUNCTION increment_property_views(property_uuid UUID)
RETURNS VOID AS $$
BEGIN
    UPDATE public.properties 
    SET view_count = view_count + 1 
    WHERE id = property_uuid;
END;

$$ LANGUAGE plpgsql;

-- ==========================================
-- TRIGGERS
-- ==========================================

-- Triggers de mise à jour automatique
CREATE TRIGGER update_users_updated_at
BEFORE UPDATE ON public.users
FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_properties_updated_at
BEFORE UPDATE ON public.properties
FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_visits_updated_at
BEFORE UPDATE ON public.visits
FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_leads_updated_at
BEFORE UPDATE ON public.leads
FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_documents_updated_at
BEFORE UPDATE ON public.documents
FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- ==========================================
-- ROW LEVEL SECURITY (RLS)
-- ==========================================

-- Activation RLS
ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.accounts ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.sessions ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.verification_tokens ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.property_types ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.properties ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.virtual_tours ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.visits ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.leads ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.communications ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.documents ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.property_estimations ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.payments ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_favorites ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.saved_searches ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.notifications ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.audit_logs ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.testimonials ENABLE ROW LEVEL SECURITY;

-- ==========================================
-- POLITIQUES DE SECURITE
-- ==========================================

—testimonials
CREATE POLICY "Allow public read access to approved testimonials"
ON public.testimonials
FOR SELECT
USING (is_approved = TRUE);

-- USERS
CREATE POLICY "Les utilisateurs peuvent créer leur propre profil"
ON public.users
FOR INSERT
TO authenticated
WITH CHECK (auth.uid() = id);

CREATE POLICY "Les utilisateurs peuvent voir leur propre profil"
ON public.users
FOR SELECT
TO authenticated
USING (auth.uid() = id);

CREATE POLICY "Les utilisateurs peuvent mettre à jour leur propre profil"
ON public.users
FOR UPDATE
TO authenticated
USING (auth.uid() = id);

CREATE POLICY "Admins have full access to users"
ON public.users FOR ALL
USING (get_my_role() = 'admin');


-- NEXTAUTH TABLES
CREATE POLICY "Users can manage their own accounts"
ON public.accounts FOR ALL
USING (user_id = auth.uid());

CREATE POLICY "Users can manage their own sessions"
ON public.sessions FOR ALL
USING (user_id = auth.uid());

-- PROPERTY TYPES
CREATE POLICY "All users can read property types"
ON public.property_types FOR SELECT
USING (true);

CREATE POLICY "Admins can manage property types"
ON public.property_types FOR ALL
USING (get_my_role() = 'admin');

-- PROPERTIES
CREATE POLICY "Public can view available properties"
ON public.properties FOR SELECT
USING (status = 'available' AND (is_for_sale = true OR is_for_rent = true));

CREATE POLICY "Agents can manage their properties"
ON public.properties FOR ALL
USING (agent_id = auth.uid() OR get_my_role() = 'admin');

-- VISITS
CREATE POLICY "Involved parties can manage visits"
ON public.visits FOR ALL
USING (
    client_id = auth.uid() OR 
    agent_id = auth.uid() OR 
    get_my_role() = 'admin'
);

-- LEADS
CREATE POLICY "Agents can manage assigned leads"
ON public.leads FOR ALL
USING (
    assigned_agent_id = auth.uid() OR 
    get_my_role() = 'admin'
);

-- COMMUNICATIONS
CREATE POLICY "Users can access their communications"
ON public.communications FOR ALL
USING (
    sender_id = auth.uid() OR 
    receiver_id = auth.uid() OR 
    get_my_role() = 'admin'
);

-- DOCUMENTS
CREATE POLICY "Involved parties can access documents"
ON public.documents FOR ALL
USING (
    client_id = auth.uid() OR 
    agent_id = auth.uid() OR 
    get_my_role() = 'admin'
);

-- PAYMENTS
CREATE POLICY "Users can manage their payments"
ON public.payments FOR ALL
USING (
    client_id = auth.uid() OR 
    get_my_role() = 'admin'
);

-- FAVORITES
CREATE POLICY "Users can manage their favorites"
ON public.user_favorites FOR ALL
USING (user_id = auth.uid());

-- NOTIFICATIONS
CREATE POLICY "Users can manage their notifications"
ON public.notifications FOR ALL
USING (user_id = auth.uid());

-- ==========================================
-- DONNEES INITIALES
-- ==========================================

-- Types de biens par défaut
INSERT INTO public.property_types (name, description, icon_name) VALUES
('Appartement', 'Logement dans un immeuble', 'building'),
('Maison', 'Maison individuelle', 'home'),
('Villa', 'Villa de standing', 'villa'),
('Studio', 'Logement d''une pièce', 'studio'),
('Local commercial', 'Espace pour commerce', 'store'),
('Bureau', 'Espace de travail', 'office'),
('Terrain', 'Terrain à bâtir', 'terrain'),
('Entrepôt', 'Espace de stockage', 'warehouse');

-- Créer un utilisateur admin par défaut (à modifier)
INSERT INTO public.users (email, full_name, role) VALUES
('admin@optimagestion.com', 'Administrateur OPTIMA', 'admin');